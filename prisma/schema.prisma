generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model classes {
  class_id        Int               @id @default(autoincrement())
  class_name      String            @unique(map: "class_name") @db.VarChar(80)
  class_desc      String?           @db.VarChar(350)
  class_teacher   Int?
  class_duration  Int?
  class_days      String?
  created_by      Int
  created_at      DateTime          @default(now()) @db.DateTime(0)
  updated_at      DateTime?         @db.DateTime(0)
  deleted_at      DateTime?         @db.DateTime(0)
  is_deleted      Boolean?          @default(false)
  employees       employees?        @relation(fields: [class_teacher], references: [employee_id], onDelete: NoAction, onUpdate: NoAction, map: "FK_class_teacher")
  studentsofclass studentsofclass[]

  @@index([class_teacher], map: "FK_class_teacher")
}

model employees {
  employee_id       Int       @id @default(autoincrement())
  employee_name     String    @db.VarChar(80)
  employee_cpf      String    @unique(map: "employee_cpf") @db.VarChar(11)
  employee_email    String    @unique(map: "employee_email") @db.VarChar(100)
  employee_password String    @db.VarChar(100)
  employee_phone    String    @unique(map: "employee_phone") @db.VarChar(13)
  employee_addr     String    @db.VarChar(150)
  employee_salary   Decimal   @db.Decimal(10, 2)
  employee_role     Int
  created_by        Int
  created_at        DateTime  @default(now()) @db.DateTime(0)
  updated_at        DateTime? @db.DateTime(0)
  deleted_at        DateTime? @db.DateTime(0)
  is_deleted        Boolean?  @default(false)
  roles             roles     @relation(fields: [employee_role], references: [role_id], onDelete: NoAction, onUpdate: NoAction, map: "FK_employee_role")
  classes           classes[]

  @@index([employee_role], map: "FK_employee_role")
}

model events {
  event_id   Int       @id @default(autoincrement())
  event_name String    @db.VarChar(50)
  event_desc String    @db.VarChar(350)
  created_by Int
  created_at DateTime  @default(now()) @db.DateTime(0)
  updated_at DateTime? @db.DateTime(0)
  deleted_at DateTime? @db.DateTime(0)
  is_deleted Boolean?  @default(false)
}

model instrumentbrand {
  instrumentbrand_id   Int           @id @default(autoincrement())
  instrumentbrand_name String        @unique(map: "instrumentbrand_name") @db.VarChar(50)
  instrumentbrand_desc String?       @db.VarChar(350)
  instrumentbrand_logo String?       @db.VarChar(350)
  created_by           Int
  created_at           DateTime      @default(now()) @db.DateTime(0)
  updated_at           DateTime?     @db.DateTime(0)
  deleted_at           DateTime?     @db.DateTime(0)
  is_deleted           Boolean?      @default(false)
  instruments          instruments[]
}

model instruments {
  instrument_id      Int             @id @default(autoincrement())
  instrument_type    Int
  instrument_model   String          @db.VarChar(50)
  instrument_brand   Int
  instrument_student Int?
  created_by         Int
  created_at         DateTime        @default(now()) @db.DateTime(0)
  updated_at         DateTime?       @db.DateTime(0)
  deleted_at         DateTime?       @db.DateTime(0)
  is_deleted         Boolean?        @default(false)
  instrumentbrand    instrumentbrand @relation(fields: [instrument_brand], references: [instrumentbrand_id], onDelete: NoAction, onUpdate: NoAction, map: "FK_instrument_instrumentbrand")
  students           students?       @relation(fields: [instrument_student], references: [student_id], onDelete: NoAction, onUpdate: NoAction, map: "FK_instrument_student")
  instrumenttype     instrumenttype  @relation(fields: [instrument_type], references: [instrumenttype_id], onDelete: NoAction, onUpdate: NoAction, map: "FK_instrument_instrumenttype")

  @@index([instrument_brand], map: "FK_instrument_instrumentbrand")
  @@index([instrument_type], map: "FK_instrument_instrumenttype")
  @@index([instrument_student], map: "FK_instrument_student")
}

model instrumenttype {
  instrumenttype_id   Int           @id @default(autoincrement())
  instrumenttype_name String        @unique(map: "instrumenttype_name") @db.VarChar(50)
  instrumenttype_desc String?       @db.VarChar(350)
  created_by          Int
  created_at          DateTime      @default(now()) @db.DateTime(0)
  updated_at          DateTime?     @db.DateTime(0)
  deleted_at          DateTime?     @db.DateTime(0)
  is_deleted          Boolean?      @default(false)
  instruments         instruments[]
}

model responsibles {
  responsible_id    Int        @id @default(autoincrement())
  responsible_name  String     @db.VarChar(80)
  responsible_cpf   String     @unique(map: "responsible_cpf") @db.VarChar(11)
  responsible_email String?    @unique(map: "responsible_email") @db.VarChar(100)
  responsible_phone String     @unique(map: "responsible_phone") @db.VarChar(13)
  responsible_addr  String     @db.VarChar(150)
  created_by        Int
  created_at        DateTime   @default(now()) @db.DateTime(0)
  updated_at        DateTime?  @db.DateTime(0)
  deleted_at        DateTime?  @db.DateTime(0)
  is_deleted        Boolean?   @default(false)
  students          students[]
}

model roles {
  role_id    Int         @id @default(autoincrement())
  role_title String      @unique(map: "role_title") @db.VarChar(50)
  role_desc  String?     @db.VarChar(350)
  created_by Int
  created_at DateTime    @default(now()) @db.DateTime(0)
  updated_at DateTime?   @db.DateTime(0)
  deleted_at DateTime?   @db.DateTime(0)
  is_deleted Boolean?    @default(false)
  employees  employees[]
}

model students {
  student_id          Int               @id @default(autoincrement())
  student_name        String            @db.VarChar(80)
  student_rg          String?           @db.VarChar(9)
  student_cpf         String            @unique(map: "student_cpf") @db.VarChar(11)
  student_email       String?           @unique(map: "student_email") @db.VarChar(100)
  student_phone       String?           @unique(map: "student_phone") @db.VarChar(13)
  student_addr        String            @db.VarChar(150)
  student_responsible Int?
  student_scholarship Decimal?          @db.Decimal(10, 2)
  created_by          Int
  created_at          DateTime          @default(now()) @db.DateTime(0)
  updated_at          DateTime?         @db.DateTime(0)
  deleted_at          DateTime?         @db.DateTime(0)
  is_deleted          Boolean?          @default(false)
  responsibles        responsibles?     @relation(fields: [student_responsible], references: [responsible_id], onDelete: NoAction, onUpdate: NoAction, map: "FK_student_responsible")
  instruments         instruments[]
  studentsofclass     studentsofclass[]

  @@index([student_responsible], map: "FK_student_responsible")
}

model studentsofclass {
  student_id Int
  class_id   Int
  created_by Int
  created_at DateTime @default(now()) @db.DateTime(0)
  classes    classes  @relation(fields: [class_id], references: [class_id], onDelete: NoAction, onUpdate: NoAction, map: "FK_soc_class")
  students   students @relation(fields: [student_id], references: [student_id], onDelete: NoAction, onUpdate: NoAction, map: "FK_soc_students")

  @@id([student_id, class_id])
  @@index([class_id], map: "FK_soc_class")
}
